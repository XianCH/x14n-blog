(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{965:function(t,a,e){"use strict";e.r(a);var s=e(2),r=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git常用操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git常用操作"}},[t._v("#")]),t._v(" git常用操作")]),t._v(" "),a("h2",{attrs:{id:"上传代码流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#上传代码流程"}},[t._v("#")]),t._v(" 上传代码流程")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('git init\ngit add .\ngit commit -m "提交信息"\ngit remote add origin git@github.com:XianCH/xxxx.git\ngit push -u origin master\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git remote rm origin\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\ngit pull --rebase origin master\ngit push -u origin master\n")])])]),a("h2",{attrs:{id:"删除仓库中的某个目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除仓库中的某个目录"}},[t._v("#")]),t._v(" 删除仓库中的某个目录")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('在上传项目到GitHub时,忘记忽略了某个文件夹target,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的Photo albums文件夹。但是在github上只能删除仓库,却无法删除文件夹或文件, 所以只能通过命令来解决，具体方法如下：\n\n首先进入你的master文件夹下, Git Bash Here ,打开命令窗口\n\n$ git --help 帮助命令\n\n$ git pull origin master 将远程仓库里面的项目拉下来\n\n$ dir 查看有哪些文件夹\n\n$ git rm -r --cached Photo\\ albums 删除Photo albums文件夹(这里的文件夹名有空格命令行需要用"\\ "来拼接）\n\n$ git commit -m ‘删除了Photo albums文件夹t’ 提交,添加操作说明\n\n$ git push -u origin master 将本次更改更新到GitHub项目上去\n\n')])])]),a("h2",{attrs:{id:"常用工作流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用工作流"}},[t._v("#")]),t._v(" 常用工作流")]),t._v(" "),a("p",[t._v("1，创建分支")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git checkout develop\n")])])]),a("p",[t._v("2，编写代码：在本地分支上进行开发和修改。在完成一个功能点之后，可以使用git add和git commit命令将修改提交到本地仓库")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('git add .\ngit commit -m "Add new feature"\n')])])]),a("p",[t._v("3，推送到远程仓库：将本地分支的修改推送到远程仓库中，以便其他开发者或协作者可以查看并在其基础上进行开发工作。如果是第一次推送到远程仓库，可以使用"),a("code",[t._v("git push -u")]),t._v("命令将本地分支与远程分支关联起来。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git push -u origin feature/new-feature\n")])])]),a("p",[t._v("4，提交合并请求：在远程仓库上创建一个合并请求（pull request）来将新分支中的更改合并到主分支上。在合并请求中可以讨论和修改代码，直到所有的问题得到解决并且请求被批准为止。")]),t._v(" "),a("p",[t._v("5，合并代码：将已批准的合并请求合并到主分支中。在合并之前，可以使用"),a("code",[t._v("git pull")]),t._v("命令将主分支的任何更新拉取到本地分支中，以避免冲突。在确认合并请求之后，可以使用"),a("code",[t._v("git merge")]),t._v("命令将代码合并到主分支中。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git checkout master\n\ngit push\n\ngit merge feature/new-feature\n\ngit pull\n")])])]),a("p",[t._v("6，删除分支")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git branch -d feature/new-feature\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);